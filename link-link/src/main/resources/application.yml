server:
  port: 8003
spring:
  application:
    name: link-link
  cloud:
    nacos:
      discovery:
        server-addr: 212.129.255.88:8848
        username: nacos
        password: nacos
  datasource:
    hikari:
      minimum-idle: 2
      maximum-pool-size: 10
      idle-timeout: 120000
      connection-timeout: 300000
      leak-detection-threshold: 300000
  redis:
    client-type: jedis
    host: 212.129.255.88
    password: pl1008666.
    port: 6379
    jedis:
      pool:
        # 连接池的最大连接数(使用负值表示没有限制)
        max-active: 100
        # 连接池中的最大空闲连接
        max-idle: 100
        # 连接池中的最小空闲连接
        min-idle: 100
        # 连接池最大阻塞等待时间 (使用复制表示没有限制)
        max-wait: 60000

  shardingsphere:
    props:
      # 打印执行的数据库以及语句
      sql:
        show: true
    datasource:
      #数据源名称
      names: ds0,ds1,dsa
      # ds0配置
      ds0:
        connectionTimeoutMilliseconds: 30000
        driver-class-name: com.mysql.cj.jdbc.Driver
        idleTimeoutMilliseconds: 60000
        jdbc-url: jdbc:mysql://212.129.255.88:3306/link_0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        maintenanceIntervalMilliseconds: 30000
        maxLifetimeMilliseconds: 1800000
        maxPoolSize: 50
        minPoolSize: 50
        username: root
        password: pl1008666.
        type: com.zaxxer.hikari.HikariDataSource
      # ds1配置
      ds1:
        connectionTimeoutMilliseconds: 30000
        driver-class-name: com.mysql.cj.jdbc.Driver
        idleTimeoutMilliseconds: 60000
        jdbc-url: jdbc:mysql://212.129.255.88:3306/link_1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        maintenanceIntervalMilliseconds: 30000
        maxLifetimeMilliseconds: 1800000
        maxPoolSize: 50
        minPoolSize: 50
        username: root
        password: pl1008666.
        type: com.zaxxer.hikari.HikariDataSource
      # dsa配置
      dsa:
        connectionTimeoutMilliseconds: 30000
        driver-class-name: com.mysql.cj.jdbc.Driver
        idleTimeoutMilliseconds: 60000
        jdbc-url: jdbc:mysql://212.129.255.88:3306/link_a?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        maintenanceIntervalMilliseconds: 30000
        maxLifetimeMilliseconds: 1800000
        maxPoolSize: 50
        minPoolSize: 50
        username: root
        password: pl1008666.
        type: com.zaxxer.hikari.HikariDataSource

    sharding:
      # 配置默认数据库
      default-data-source-name: ds0
      # 默认id生成策略
      default-key-generator:
        column: id
        type: SNOWFLAKE
        props:
          worker:
            id: ${workId}
      tables:
        link_group:
          #分库策略
          database-strategy:
            inline:
              sharding-column: account_no
              algorithm-expression: ds$->{account_no % 2}
        # 先进行水平分库，然后再进行水平分表
        short_link:
          database-strategy:
            standard:
              sharding-column: code
              precise-algorithm-class-name: com.example.shortlink.link.strategy.CustomDBPreciseShardingAlgorithm
          # 真实库，逻辑表
          actual-data-nodes: ds0.short_link,ds1.short_link,dsa.short_link
          table-strategy:
            standard:
              sharding-column: code
              precise-algorithm-class-name: com.example.shortlink.link.strategy.CustomTablePreciseShardingAlgorithm
        # 短链mapping表策略
        group_code_mapping:
          # 先进行水平分库再进行水平分表
          database-strategy:
            inline:
              sharding-column: account_no
              algorithm-expression: ds$->{account_no % 2}
          # 水平分表
          actual-data-nodes: ds$->{0..1}.group_code_mapping_$->{0..1}
          table-strategy:
            inline:
              sharding-column: group_id
              algorithm-expression: group_code_mapping_$->{group_id % 2}

  # rabbitmq 配置
  rabbitmq:
    host: 212.129.255.88
    port: 5672
    # 需要手工创建虚拟机
    virtual-host: dev
    username: admin
    password: pl1008666.
    # 消息确认方式 manual(手动ack) auto 自动ack 消息消费重试达到指定次数进到异常交换机和异常队列，需要改为自动确认消息
    listener:
      simple:
        acknowledge-mode: auto
        # 开启重试机制
        retry:
          enabled: true
          # 最大重试次数
          max-attempts: 4
          # 重试消息的时间间隔 5秒
          initial-interval: 5000

  #kafka配置
  kafka:
    bootstrap-servers: 212.129.255.88:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

# 用于rpc调用token验证
rpc:
  token: pl1008666.